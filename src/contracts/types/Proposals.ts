/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ProposalsInterface extends utils.Interface {
  functions: {
    "createProposal(string)": FunctionFragment;
    "getVotes(string)": FunctionFragment;
    "vote(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createProposal" | "getVotes" | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "BountyAwarded(string,address,uint256)": EventFragment;
    "ProposalCreated(string)": EventFragment;
    "Voted(string,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BountyAwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export interface BountyAwardedEventObject {
  id: string;
  proposer: string;
  bounty: BigNumber;
}
export type BountyAwardedEvent = TypedEvent<
  [string, string, BigNumber],
  BountyAwardedEventObject
>;

export type BountyAwardedEventFilter = TypedEventFilter<BountyAwardedEvent>;

export interface ProposalCreatedEventObject {
  id: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface VotedEventObject {
  id: string;
  user: string;
  votes: BigNumber;
}
export type VotedEvent = TypedEvent<
  [string, string, BigNumber],
  VotedEventObject
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface Proposals extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProposalsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProposal(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVotes(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vote(
      proposal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createProposal(
    id: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVotes(
    id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vote(
    proposal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createProposal(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getVotes(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      proposal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BountyAwarded(string,address,uint256)"(
      id?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null,
      bounty?: null
    ): BountyAwardedEventFilter;
    BountyAwarded(
      id?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null,
      bounty?: null
    ): BountyAwardedEventFilter;

    "ProposalCreated(string)"(
      id?: PromiseOrValue<string> | null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      id?: PromiseOrValue<string> | null
    ): ProposalCreatedEventFilter;

    "Voted(string,address,uint256)"(
      id?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      votes?: null
    ): VotedEventFilter;
    Voted(
      id?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      votes?: null
    ): VotedEventFilter;
  };

  estimateGas: {
    createProposal(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVotes(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      proposal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createProposal(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVotes(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      proposal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
